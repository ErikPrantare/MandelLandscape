//suppress floating point optimizations for addition
float
plusIeeeCompliant(float a, float b)
{
    return mix(a, a+b, b != 0);
}

// prerequisite: a > b
vec2
quickTwoSum(float a, float b) 
{
    float sum = plusIeeeCompliant(a, b);
    float error = b - (sum - a);
    return vec2(sum, error);
}

vec2
twoSum(float a, float b)
{
    float sum = plusIeeeCompliant(a, b);
    float v = sum - a;
    float error = (a - (sum - v)) + (b - v);
    return vec2(sum, error);
}

vec2
split(float a)
{
    float t = (pow(2.0, 12.0) + 1.0) * a;
    float hi = t - (t - a);
    float lo = a - hi;
    return vec2(hi, lo);
}

vec2
twoProd(float a, float b)
{
    float prod = a * b;
    vec2 as = split(a);
    vec2 bs = split(b);
    float error = ((as.x*bs.x - prod) + as.x*bs.y + as.y*bs.x) + as.y*bs.y;
    return vec2(prod, error);
}

vec2
doubleSum(vec2 a, vec2 b)
{
    vec2 s = twoSum(a.x, b.x);
    vec2 t = twoSum(a.y, b.y);
    s.y += t.x;
    s = quickTwoSum(s.x, s.y);
    s.y += t.y;
    return quickTwoSum(s.x, s.y);
}

vec2
doubleProd(vec2 a, vec2 b)
{
    vec2 p = twoProd(a.x, b.x);
    p.y += a.x*b.y + a.y*b.x;
    return twoSum(p.x, p.y);
}

vec4
doubleCompSum(vec4 a, vec4 b)
{
    return vec4(doubleSum(a.xy, b.xy), doubleSum(a.zw, b.zw));
}

float
value(vec2 posHigh, vec2 posLow)
{
    vec2 c_ = posHigh + posLow;

    // main cardioid check
    float q = pow(c_.x - 0.25f, 2.0f) + c_.y * c_.y;
    if(q * (q + (c_.x - 0.25f)) < 0.25f * c_.y * c_.y) {
        return -1.0;
    }

    // period-2 bulb check
    if((c_.x + 1.0f) * (c_.x + 1.0f) + c_.y * c_.y < 0.25f * 0.25f) {
        return -1.0;
    }

    // a.xy: real, a.zw: imag
    vec4 c  = vec4(twoSum(posHigh.x, posLow.x),
                    twoSum(posHigh.y, posLow.y));
    vec4 z   = vec4(0.0, 0.0, 0.0, 0.0);
    vec2 realSquare = vec2(0.0, 0.0);
    vec2 imagSquare = vec2(0.0, 0.0);

    for(int i = 0; i < iterations; ++i) {
        z.zw = doubleProd(z.xy, z.zw); 
        z.zw += z.zw;
        z.xy = doubleSum(realSquare, -imagSquare);
        z = doubleCompSum(z, c);

        realSquare = doubleProd(z.xy, z.xy);
        imagSquare = doubleProd(z.zw, z.zw);

        if(realSquare.x + imagSquare.x > 256.0f * 256.0f) {
            return float(i) - log2(log2(dot(z, z)));
        }
    }

    return -1.0;
}
