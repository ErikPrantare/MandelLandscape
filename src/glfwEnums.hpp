#ifndef MANDELLANDSCAPE_GLFW_ENUMS_HPP
#define MANDELLANDSCAPE_GLFW_ENUMS_HPP

#include <glad/glad.h>
#include <GLFW/glfw3.h>

namespace Input {

enum class ButtonState {
    RELEASE = GLFW_RELEASE,
    PRESS   = GLFW_PRESS,
    REPEAT  = GLFW_REPEAT,
};

enum class HatState {
    CENTERED   = GLFW_HAT_CENTERED,
    UP         = GLFW_HAT_UP,
    RIGHT      = GLFW_HAT_RIGHT,
    DOWN       = GLFW_HAT_DOWN,
    LEFT       = GLFW_HAT_LEFT,
    RIGHT_UP   = GLFW_HAT_RIGHT_UP,
    RIGHT_DOWN = GLFW_HAT_RIGHT_DOWN,
    LEFT_UP    = GLFW_HAT_LEFT_UP,
    LEFT_DOWN  = GLFW_HAT_LEFT_DOWN,
};

enum class Key {
    UNKNOWN       = GLFW_KEY_UNKNOWN,
    SPACE         = GLFW_KEY_SPACE,
    APOSTROPHE    = GLFW_KEY_APOSTROPHE,
    COMMA         = GLFW_KEY_COMMA,
    MINUS         = GLFW_KEY_MINUS,
    PERIOD        = GLFW_KEY_PERIOD,
    SLASH         = GLFW_KEY_SLASH,
    KEY_0         = GLFW_KEY_0,
    KEY_1         = GLFW_KEY_1,
    KEY_2         = GLFW_KEY_2,
    KEY_3         = GLFW_KEY_3,
    KEY_4         = GLFW_KEY_4,
    KEY_5         = GLFW_KEY_5,
    KEY_6         = GLFW_KEY_6,
    KEY_7         = GLFW_KEY_7,
    KEY_8         = GLFW_KEY_8,
    KEY_9         = GLFW_KEY_9,
    SEMICOLON     = GLFW_KEY_SEMICOLON,
    EQUAL         = GLFW_KEY_EQUAL,
    A             = GLFW_KEY_A,
    B             = GLFW_KEY_B,
    C             = GLFW_KEY_C,
    D             = GLFW_KEY_D,
    E             = GLFW_KEY_E,
    F             = GLFW_KEY_F,
    G             = GLFW_KEY_G,
    H             = GLFW_KEY_H,
    I             = GLFW_KEY_I,
    J             = GLFW_KEY_J,
    K             = GLFW_KEY_K,
    L             = GLFW_KEY_L,
    M             = GLFW_KEY_M,
    N             = GLFW_KEY_N,
    O             = GLFW_KEY_O,
    P             = GLFW_KEY_P,
    Q             = GLFW_KEY_Q,
    R             = GLFW_KEY_R,
    S             = GLFW_KEY_S,
    T             = GLFW_KEY_T,
    U             = GLFW_KEY_U,
    V             = GLFW_KEY_V,
    W             = GLFW_KEY_W,
    X             = GLFW_KEY_X,
    Y             = GLFW_KEY_Y,
    Z             = GLFW_KEY_Z,
    LEFT_BRACKET  = GLFW_KEY_LEFT_BRACKET,
    BACKSLASH     = GLFW_KEY_BACKSLASH,
    RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
    GRAVE_ACCENT  = GLFW_KEY_GRAVE_ACCENT,
    WORLD_1       = GLFW_KEY_WORLD_1,
    WORLD_2       = GLFW_KEY_WORLD_2,
    ESCAPE        = GLFW_KEY_ESCAPE,
    ENTER         = GLFW_KEY_ENTER,
    TAB           = GLFW_KEY_TAB,
    BACKSPACE     = GLFW_KEY_BACKSPACE,
    INSERT        = GLFW_KEY_INSERT,
    DELETE_       = GLFW_KEY_DELETE,
    RIGHT         = GLFW_KEY_RIGHT,
    LEFT          = GLFW_KEY_LEFT,
    DOWN          = GLFW_KEY_DOWN,
    UP            = GLFW_KEY_UP,
    PAGE_UP       = GLFW_KEY_PAGE_UP,
    PAGE_DOWN     = GLFW_KEY_PAGE_DOWN,
    HOME          = GLFW_KEY_HOME,
    END           = GLFW_KEY_END,
    CAPS_LOCK     = GLFW_KEY_CAPS_LOCK,
    SCROLL_LOCK   = GLFW_KEY_SCROLL_LOCK,
    NUM_LOCK      = GLFW_KEY_NUM_LOCK,
    PRINT_SCREEN  = GLFW_KEY_PRINT_SCREEN,
    PAUSE         = GLFW_KEY_PAUSE,
    F1            = GLFW_KEY_F1,
    F2            = GLFW_KEY_F2,
    F3            = GLFW_KEY_F3,
    F4            = GLFW_KEY_F4,
    F5            = GLFW_KEY_F5,
    F6            = GLFW_KEY_F6,
    F7            = GLFW_KEY_F7,
    F8            = GLFW_KEY_F8,
    F9            = GLFW_KEY_F9,
    F10           = GLFW_KEY_F10,
    F11           = GLFW_KEY_F11,
    F12           = GLFW_KEY_F12,
    F13           = GLFW_KEY_F13,
    F14           = GLFW_KEY_F14,
    F15           = GLFW_KEY_F15,
    F16           = GLFW_KEY_F16,
    F17           = GLFW_KEY_F17,
    F18           = GLFW_KEY_F18,
    F19           = GLFW_KEY_F19,
    F20           = GLFW_KEY_F20,
    F21           = GLFW_KEY_F21,
    F22           = GLFW_KEY_F22,
    F23           = GLFW_KEY_F23,
    F24           = GLFW_KEY_F24,
    F25           = GLFW_KEY_F25,
    KP_0          = GLFW_KEY_KP_0,
    KP_1          = GLFW_KEY_KP_1,
    KP_2          = GLFW_KEY_KP_2,
    KP_3          = GLFW_KEY_KP_3,
    KP_4          = GLFW_KEY_KP_4,
    KP_5          = GLFW_KEY_KP_5,
    KP_6          = GLFW_KEY_KP_6,
    KP_7          = GLFW_KEY_KP_7,
    KP_8          = GLFW_KEY_KP_8,
    KP_9          = GLFW_KEY_KP_9,
    KP_DECIMAL    = GLFW_KEY_KP_DECIMAL,
    KP_DIVIDE     = GLFW_KEY_KP_DIVIDE,
    KP_MULTIPLY   = GLFW_KEY_KP_MULTIPLY,
    KP_SUBTRACT   = GLFW_KEY_KP_SUBTRACT,
    KP_ADD        = GLFW_KEY_KP_ADD,
    KP_ENTER      = GLFW_KEY_KP_ENTER,
    KP_EQUAL      = GLFW_KEY_KP_EQUAL,
    LEFT_SHIFT    = GLFW_KEY_LEFT_SHIFT,
    LEFT_CONTROL  = GLFW_KEY_LEFT_CONTROL,
    LEFT_ALT      = GLFW_KEY_LEFT_ALT,
    LEFT_SUPER    = GLFW_KEY_LEFT_SUPER,
    RIGHT_SHIFT   = GLFW_KEY_RIGHT_SHIFT,
    RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
    RIGHT_ALT     = GLFW_KEY_RIGHT_ALT,
    RIGHT_SUPER   = GLFW_KEY_RIGHT_SUPER,
    MENU          = GLFW_KEY_MENU,
    LAST          = GLFW_KEY_LAST,
};

enum class MouseButton {
    BUTTON_1 = GLFW_MOUSE_BUTTON_1,
    BUTTON_2 = GLFW_MOUSE_BUTTON_2,
    BUTTON_3 = GLFW_MOUSE_BUTTON_3,
    BUTTON_4 = GLFW_MOUSE_BUTTON_4,
    BUTTON_5 = GLFW_MOUSE_BUTTON_5,
    BUTTON_6 = GLFW_MOUSE_BUTTON_6,
    BUTTON_7 = GLFW_MOUSE_BUTTON_7,
    BUTTON_8 = GLFW_MOUSE_BUTTON_8,
    LAST     = GLFW_MOUSE_BUTTON_LAST,
    LEFT     = GLFW_MOUSE_BUTTON_LEFT,
    RIGHT    = GLFW_MOUSE_BUTTON_RIGHT,
    MIDDLE   = GLFW_MOUSE_BUTTON_MIDDLE,
};

enum class Joystick {
    JOYSTICK_1  = GLFW_JOYSTICK_1,
    JOYSTICK_2  = GLFW_JOYSTICK_2,
    JOYSTICK_3  = GLFW_JOYSTICK_3,
    JOYSTICK_4  = GLFW_JOYSTICK_4,
    JOYSTICK_5  = GLFW_JOYSTICK_5,
    JOYSTICK_6  = GLFW_JOYSTICK_6,
    JOYSTICK_7  = GLFW_JOYSTICK_7,
    JOYSTICK_8  = GLFW_JOYSTICK_8,
    JOYSTICK_9  = GLFW_JOYSTICK_9,
    JOYSTICK_10 = GLFW_JOYSTICK_10,
    JOYSTICK_11 = GLFW_JOYSTICK_11,
    JOYSTICK_12 = GLFW_JOYSTICK_12,
    JOYSTICK_13 = GLFW_JOYSTICK_13,
    JOYSTICK_14 = GLFW_JOYSTICK_14,
    JOYSTICK_15 = GLFW_JOYSTICK_15,
    JOYSTICK_16 = GLFW_JOYSTICK_16,
    LAST        = GLFW_JOYSTICK_LAST,
};

enum class GamepadButton {
    A            = GLFW_GAMEPAD_BUTTON_A,
    B            = GLFW_GAMEPAD_BUTTON_B,
    X            = GLFW_GAMEPAD_BUTTON_X,
    Y            = GLFW_GAMEPAD_BUTTON_Y,
    LEFT_BUMPER  = GLFW_GAMEPAD_BUTTON_LEFT_BUMPER,
    RIGHT_BUMPER = GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER,
    BACK         = GLFW_GAMEPAD_BUTTON_BACK,
    START        = GLFW_GAMEPAD_BUTTON_START,
    GUIDE        = GLFW_GAMEPAD_BUTTON_GUIDE,
    LEFT_THUMB   = GLFW_GAMEPAD_BUTTON_LEFT_THUMB,
    RIGHT_THUMB  = GLFW_GAMEPAD_BUTTON_RIGHT_THUMB,
    DPAD_UP      = GLFW_GAMEPAD_BUTTON_DPAD_UP,
    DPAD_RIGHT   = GLFW_GAMEPAD_BUTTON_DPAD_RIGHT,
    DPAD_DOWN    = GLFW_GAMEPAD_BUTTON_DPAD_DOWN,
    DPAD_LEFT    = GLFW_GAMEPAD_BUTTON_DPAD_LEFT,
    LAST         = GLFW_GAMEPAD_BUTTON_LAST,
    CROSS        = GLFW_GAMEPAD_BUTTON_CROSS,
    CIRCLE       = GLFW_GAMEPAD_BUTTON_CIRCLE,
    SQUARE       = GLFW_GAMEPAD_BUTTON_SQUARE,
    TRIANGLE     = GLFW_GAMEPAD_BUTTON_TRIANGLE,
};

enum class GamePadAxis {
    LEFT_X        = GLFW_GAMEPAD_AXIS_LEFT_X,
    LEFT_Y        = GLFW_GAMEPAD_AXIS_LEFT_Y,
    RIGHT_X       = GLFW_GAMEPAD_AXIS_RIGHT_X,
    RIGHT_Y       = GLFW_GAMEPAD_AXIS_RIGHT_Y,
    LEFT_TRIGGER  = GLFW_GAMEPAD_AXIS_LEFT_TRIGGER,
    RIGHT_TRIGGER = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER,
    LAST          = GLFW_GAMEPAD_AXIS_LAST,
};

}    // namespace Input

namespace glfwHintsAndAttrib {

enum class Error {
    NO_ERROR_           = GLFW_NO_ERROR,
    NOT_INITIALIZED     = GLFW_NOT_INITIALIZED,
    NO_CURRENT_CONTEXT  = GLFW_NO_CURRENT_CONTEXT,
    INVALID_ENUM        = GLFW_INVALID_ENUM,
    INVALID_VALUE       = GLFW_INVALID_VALUE,
    OUT_OF_MEMORY       = GLFW_OUT_OF_MEMORY,
    API_UNAVAILABLE     = GLFW_API_UNAVAILABLE,
    VERSION_UNAVAILABLE = GLFW_VERSION_UNAVAILABLE,
    PLATFORM_ERROR      = GLFW_PLATFORM_ERROR,
    FORMAT_UNAVAILABLE  = GLFW_FORMAT_UNAVAILABLE,
};

enum class Window {
    NO_WINDOW_CONTEXT        = GLFW_NO_WINDOW_CONTEXT,
    FOCUSED                  = GLFW_FOCUSED,
    ICONIFIED                = GLFW_ICONIFIED,
    RESIZABLE                = GLFW_RESIZABLE,
    VISIBLE                  = GLFW_VISIBLE,
    DECORATED                = GLFW_DECORATED,
    AUTO_ICONIFY             = GLFW_AUTO_ICONIFY,
    FLOATING                 = GLFW_FLOATING,
    MAXIMIZED                = GLFW_MAXIMIZED,
    CENTER_CURSOR            = GLFW_CENTER_CURSOR,
    TRANSPARENT_FRAMEBUFFER  = GLFW_TRANSPARENT_FRAMEBUFFER,
    HOVERED                  = GLFW_HOVERED,
    FOCUS_ON_SHOW            = GLFW_FOCUS_ON_SHOW,
    SCALE_TO_MONITOR         = GLFW_SCALE_TO_MONITOR,
    COCOA_RETINA_FRAMEBUFFER = GLFW_COCOA_RETINA_FRAMEBUFFER,
    COCOA_FRAME_NAME         = GLFW_COCOA_FRAME_NAME,
    COCOA_GRAPHICS_SWITCHING = GLFW_COCOA_GRAPHICS_SWITCHING,
    X11_CLASS_NAME           = GLFW_X11_CLASS_NAME,
    X11_INSTANCE_NAME        = GLFW_X11_INSTANCE_NAME,
};

enum class BitDepth {
    RED_BITS         = GLFW_RED_BITS,
    GREEN_BITS       = GLFW_GREEN_BITS,
    BLUE_BITS        = GLFW_BLUE_BITS,
    ALPHA_BITS       = GLFW_ALPHA_BITS,
    DEPTH_BITS       = GLFW_DEPTH_BITS,
    STENCIL_BITS     = GLFW_STENCIL_BITS,
    ACCUM_RED_BITS   = GLFW_ACCUM_RED_BITS,
    ACCUM_GREEN_BITS = GLFW_ACCUM_GREEN_BITS,
    ACCUM_BLUE_BITS  = GLFW_ACCUM_BLUE_BITS,
    ACCUM_ALPHA_BITS = GLFW_ACCUM_ALPHA_BITS,
};

enum class Unique {
    AUX_BUFFERS          = GLFW_AUX_BUFFERS,
    STEREO               = GLFW_STEREO,
    SAMPLES              = GLFW_SAMPLES,
    SRGB_CAPABLE         = GLFW_SRGB_CAPABLE,
    REFRESH_RATE         = GLFW_REFRESH_RATE,
    DOUBLEBUFFER         = GLFW_DOUBLEBUFFER,
    JOYSTICK_HAT_BUTTONS = GLFW_JOYSTICK_HAT_BUTTONS,
};

enum class ClientAPI {
    CLIENT_API            = GLFW_CLIENT_API,
    CONTEXT_VERSION_MAJOR = GLFW_CONTEXT_VERSION_MAJOR,
    CONTEXT_VERSION_MINOR = GLFW_CONTEXT_VERSION_MINOR,
    CONTEXT_REVISION      = GLFW_CONTEXT_REVISION,
    CONTEXT_ROBUSTNESS    = GLFW_CONTEXT_ROBUSTNESS,
};

enum class OpenGL {
    OPENGL_FORWARD_COMPAT = GLFW_OPENGL_FORWARD_COMPAT,
    OPENGL_DEBUG_CONTEXT  = GLFW_OPENGL_DEBUG_CONTEXT,
    OPENGL_PROFILE        = GLFW_OPENGL_PROFILE,
};

enum class Context {
    CONTEXT_RELEASE_BEHAVIOR = GLFW_CONTEXT_RELEASE_BEHAVIOR,
    CONTEXT_NO_ERROR         = GLFW_CONTEXT_NO_ERROR,
    CONTEXT_CREATION_API     = GLFW_CONTEXT_CREATION_API,
};

enum class Unknown1 {
    NO_API        = GLFW_NO_API,
    OPENGL_API    = GLFW_OPENGL_API,
    OPENGL_ES_API = GLFW_OPENGL_ES_API,
};

enum class Unknown2 {
    NO_ROBUSTNESS         = GLFW_NO_ROBUSTNESS,
    NO_RESET_NOTIFICATION = GLFW_NO_RESET_NOTIFICATION,
    LOSE_CONTEXT_ON_RESET = GLFW_LOSE_CONTEXT_ON_RESET,
};

enum class Unknown3 {
    OPENGL_ANY_PROFILE    = GLFW_OPENGL_ANY_PROFILE,
    OPENGL_CORE_PROFILE   = GLFW_OPENGL_CORE_PROFILE,
    OPENGL_COMPAT_PROFILE = GLFW_OPENGL_COMPAT_PROFILE,
};

enum class Unknown4 {
    CURSOR               = GLFW_CURSOR,
    STICKY_KEYS          = GLFW_STICKY_KEYS,
    STICKY_MOUSE_BUTTONS = GLFW_STICKY_MOUSE_BUTTONS,
    LOCK_KEY_MODS        = GLFW_LOCK_KEY_MODS,
    RAW_MOUSE_MOTION     = GLFW_RAW_MOUSE_MOTION,
};

enum class Unknown5 {
    CURSOR_NORMAL   = GLFW_CURSOR_NORMAL,
    CURSOR_HIDDEN   = GLFW_CURSOR_HIDDEN,
    CURSOR_DISABLED = GLFW_CURSOR_DISABLED,
};

enum class Unknown6 {
    ANY_RELEASE_BEHAVIOR   = GLFW_ANY_RELEASE_BEHAVIOR,
    RELEASE_BEHAVIOR_FLUSH = GLFW_RELEASE_BEHAVIOR_FLUSH,
    RELEASE_BEHAVIOR_NONE  = GLFW_RELEASE_BEHAVIOR_NONE,
};

enum class Unknown7 {
    NATIVE_CONTEXT_API = GLFW_NATIVE_CONTEXT_API,
    EGL_CONTEXT_API    = GLFW_EGL_CONTEXT_API,
    OSMESA_CONTEXT_API = GLFW_OSMESA_CONTEXT_API,
};

enum class CursorShape {
    ARROW_CURSOR     = GLFW_ARROW_CURSOR,
    IBEAM_CURSOR     = GLFW_IBEAM_CURSOR,
    CROSSHAIR_CURSOR = GLFW_CROSSHAIR_CURSOR,
    HAND_CURSOR      = GLFW_HAND_CURSOR,
    HRESIZE_CURSOR   = GLFW_HRESIZE_CURSOR,
    VRESIZE_CURSOR   = GLFW_VRESIZE_CURSOR,
};

enum class Connection {
    CONNECTED    = GLFW_CONNECTED,
    DISCONNECTED = GLFW_DISCONNECTED,
};

enum class MacOS {
    COCOA_CHDIR_RESOURCES = GLFW_COCOA_CHDIR_RESOURCES,
    COCOA_MENUBAR         = GLFW_COCOA_MENUBAR,
};

}    // namespace glfwHintsAndAttrib

#endif    // MANDELLANDSCAPE_GLFW_ENUMS_HPP
